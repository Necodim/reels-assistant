const express = require('express');
const path = require('path');
const app = express();
const { formatDate, nextMonth } = require('../helpers/dateHelper');
const { addSubscription, updateSubscriptionByCloudPaymentsId, getSubscriptionByCloudPaymentsId, removeSubscription } = require('../db/service/subscriptionService');
const { getUserByUsername, getUserById } = require('../db/service/userService');
const bot = require('../bot/bot');
const { buttons } = require('../bot/helpers/buttons');
const { products } = require('../bot/helpers/products');

app.use(express.json());

app.get('/', (req, res) => {
  res.status(200).sendFile(path.join(__dirname, '..', '..', 'index.html'));
});

app.get('/cloudpayments', (req, res) => {
  try {
    const amount = req.query.amount;
    const name = req.query.name;

    res.redirect(`/src/payments/cloudpayments.html?amount=${encodeURIComponent(amount)}&name=${encodeURIComponent(name)}`);
  } catch (error) {
    res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

app.get('/cloudpayments/success', (req, res) => {
  res.status(200).sendFile(path.join(__dirname, 'success.html'));
});

app.get('/cloudpayments/fail', (req, res) => {
  res.status(200).sendFile(path.join(__dirname, 'fail.html'));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ check
app.post('/cloudpayments/check', (req, res) => {
  res.status(200).send({ code: 0 });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ pay
app.post('/cloudpayments/pay', async (req, res) => {
  const { Data, Amount, SubscriptionId } = req.body;

  try {
    const username = Data.telegram.replace('@', '');
    const price = parseInt(Amount, 10);
    const name = products.find(product => product.price === price);
    const user = await getUserByUsername(username);
    const subscriptionDetails = {
      userId: user.id,
      name: name,
      price: price,
      subscriptionId: SubscriptionId,
      end: nextMonth(),
    }
    await addSubscription(user.id, subscriptionDetails);
    const message = '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.'
    const options = buttons.goHome;
    await bot.sendMessage(user.chatId, message, options);
    res.status(200).send({ code: 0 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    res.status(500).send({ code: 13 });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ recurrent
app.post('/cloudpayments/recurrent', async (req, res) => {
  const { Id, Amount, Status, FailedTransactionsNumber, NextTransactionDate } = req.body;
  let message, options;
  
  try {
    if (Status !== 'Active') {
      const subscription = getSubscriptionByCloudPaymentsId(Id);
      const user = getUserById(subscription.userId);
      const amount = parseInt(Amount, 10);

      switch (Status) {
        case 'PastDue':
          message = `–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞. –ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂. –î–ª—è –ø–ª–∞—Ç–µ–∂–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è ${amount}‚ÇΩ. `;
          message += FailedTransactionsNumber < 2 ? '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º —Å–ø–∏—Å–∞—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ —á—É—Ç—å –ø–æ–∑–∂–µ.' : '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å. –ü–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—Å—è.';
          options = buttons.goHome;
          await bot.sendMessage(user.chatId, message, options);
          break;
        default:
          message = '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá';
          options = buttons.purchase.user;
          await removeSubscription(user.id, subscription.id);
          await bot.sendMessage(user.chatId, message, options);
          break;
      }
    } else {
      const subscription = await updateSubscriptionByCloudPaymentsId(Id, { end: NextTransactionDate });
      const date = formatDate(subscription.end, 'd MMMM, HH:mm');
      const user = getUserById(subscription.userId);
      
      message = `–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞. –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è: ${date}`
      options = buttons.goHome;
      await bot.sendMessage(user.chatId, message, options);
    }
    res.status(200).send({ code: 0 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏', error);
    res.status(500).send({ code: 13 });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(3000, () => {
  console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');
});
