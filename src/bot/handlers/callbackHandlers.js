const bot = require('../bot');
const { sendVideoToBot, sendIdeaOutside, sendAnswerOutside } = require('../send');
const buttons = require('../helpers/buttons');
const products = require('../helpers/products');
const { findHashtagByNumber } = require('../helpers/hashtags');
const { getUser, updateUserState, getUserByChatId, getUserById } = require('../../db/service/userService');
const { getIdeaById, updateIdeaById, deleteIdeaById } = require('../../db/service/ideaService');
const { checkDailyLimit, fetchIdeaForUser } = require('../../db/service/userIdeasService');
const { createFavoriteIdea } = require('../../db/service/favoriteIdeaService');
const { getVideoById, updateVideoById, setVideoEvaluateTo, getNextUnratedVideo } = require('../../db/service/videoService');
const message = require('../events/message');
const { getUserSubscriptions, getSubscriptionById, getUserSubscription, updateSubscription, getExpertSubscriberCount } = require('../../db/service/subscriptionService');
const { formatDate } = require('../../helpers/dateHelper');
const { subscriptionsCancel } = require('../../payments/cloudpaymentAPI');
const emojiHelper = require('../../helpers/emojiHelper');
const { getPlural } = require('../../helpers/getPlural');

const handleError = (error, callbackQuery) => {
  if (error.message === '–ù–æ–≤—ã–µ –∏–¥–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã') {
    bot.sendMessage(callbackQuery.from.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤—ã—Ö –∏–¥–µ–π –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º üòâ');
  } else if (error.message === '–ù–æ–≤—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã') {
    bot.sendMessage(callbackQuery.from.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç üòâ');
  } else {
    console.error(`–û—à–∏–±–∫–∞ –≤ callbackQuery (${callbackQuery.data})`, error);
  }
}

const home = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const message = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';

  try {
    const user = await getUser(callbackQuery);

    const options = user.isExpert ? buttons.mainMenu('expert') : buttons.mainMenu('user');
    await bot.sendMessage(chatId, message, options);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const settings = async (callbackQuery) => {
  try {
    const user = await getUser(callbackQuery);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const sendVideo = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;

  try {
    const user = await getUser(callbackQuery);
    const subscriptions = await getUserSubscriptions(user._id);
    if (subscriptions.length) {
      await updateUserState(chatId, 'videoAwaiting');
      const message = '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ä–æ–ª–∏–∫ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:';
      const options = buttons.home();
      await bot.sendMessage(chatId, message, options);
    } else {
      await updateUserState(chatId, '');
      const message = '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:';
      const options = buttons.home('subscription');
      await bot.sendMessage(chatId, message, options);
    }
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const getIdea = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;

  try {
    const user = await getUser(callbackQuery);
    const canFetch = await checkDailyLimit(user.id);
    if (!canFetch) {
      const message = `5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–¥–µ–π –¥–ª—è —Ä–∏–ª—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≤—Ç—Ä–∞ –±—É–¥—É—Ç –Ω–æ–≤—ã–µ!
${products.text}`;
      const options = buttons.purchase.user();
      await bot.sendMessage(chatId, message, options);
    } else {
      const idea = await fetchIdeaForUser(user.id);
      const caption = `${idea.caption}

–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${idea.difficulty}
${idea.hashtag}`
      // const options = {...buttons.home('getYetIdea')(idea.id), caption}; // –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–¥–µ–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      const options = {...buttons.home('getYetIdea'), caption};
      await sendVideoToBot(chatId, idea.videoId, options);
    }
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const favorite = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const ideaId = callbackQuery.data.split(':')[1];

  try {
    const user = await getUserByChatId(chatId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    await createFavoriteIdea(user.id, ideaId);
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–¥–µ–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–¥–µ–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' });
  }
}

const sendMeVideo = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const videoId = callbackQuery.data.split(':')[1];

  try {
    const video = await getVideoById(videoId);
    const options = {caption: video.caption};
    await sendVideoToBot(chatId, video.videoId, options);
  } catch (error) {
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞' });
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
  }
}

const purchase = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const pNumber = parseInt(callbackQuery.data.split(':')[1], 10);
  const product = products.products[pNumber];
  const link = product.link;
  const message = `<b>–ü—Ä–æ–¥—É–∫—Ç:</b> ${product.name}

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ, —è —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.`
  const options = {...buttons.purchase.cloudpayments(link), parse_mode: 'HTML' };

  try {
    await bot.sendMessage(chatId, message, options);
  } catch (error) {
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞' });
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É:', error);
  }
}

const createSubscription = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  
  try {
    const user = await getUser(callbackQuery);
    const subscriptions = await getUserSubscriptions(user.id);
    let message;
    if (subscriptions.length > 0) {
      if (subscriptions.length > 1) {
        message = '–£ –≤–∞—Å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:';
        subscriptions.forEach((subscription, i) => {
          const emoji = emojiHelper.number(i);
          message += `
${i > 9 ? `${i+1}.` : emoji} ${subscription.name}`;
        });
      } else {
        message = '–£ –≤–∞—Å –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞:';
        subscriptions.forEach((subscription, i) => {
          message += `
1Ô∏è‚É£ ${subscription.name}`;
        });
      }
      message += `

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –µ–π —á–∏—Å–ª–æ:`
    } else {
      message = `–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫. –í –ø–æ–¥–ø–∏—Å–∫–µ –∑–∞ 990‚ÇΩ/–º–µ—Å—è—Ü –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
${products.text}`;
    }
    const options = buttons.purchase.user(subscriptions);
    await bot.sendMessage(chatId, message, options);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é callbackQuery subscription:', error);
  }
}

const getSubscription = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const subscriptionId = callbackQuery.data.split(':')[1];
  
  try {
    const user = await getUser(callbackQuery);
    const subscription = await getUserSubscription(user.id, subscriptionId);
    const options = {...buttons.home(`cnlsb:${subscription.id}`), parse_mode: 'HTML'};
    console.log(subscription);
    const date = formatDate(subscription.end, 'd MMMM, HH:mm');
    const message = `–ù–∞–∑–≤–∞–Ω–∏–µ: ${subscription.name}
–î–∞—Ç–∞ ${subscription.status === 'Active' ? '—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è' : '–æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è'}: ${date}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —ç–∫—Å–ø–µ—Ä—Ç–µ:
<blockquote>${subscription.expertId.about}</blockquote>`
    await bot.sendMessage(chatId, message, options);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é callbackQuery getSubscription:', error);
  }
}

const cancelSubscription = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const subscriptionId = callbackQuery.data.split(':')[1];
  console.log(callbackQuery.data);
  
  try {
    const subscription = getSubscriptionById(subscriptionId);
    const response = await subscriptionsCancel(subscription.subscriptionId);
    console.log(response)
    if (response.Success) {
      const updatedSubscription = await updateSubscription(subscription._id, { status: response.Success });
      
      const date = formatDate(subscription.end, 'd MMMM, HH:mm');
      const messageUser = `–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É ${subscription.name}. –û–Ω–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ ${date}`;
      const optionsUser = buttons.home();
      await bot.sendMessage(chatId, messageUser, optionsUser);

      // const expert = await getUserById(updatedSubscription.expertId);
      // const messageExpert = '–û–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É';
      // await bot.sendMessage(expert.chatId, messageExpert);
    } else {
      const message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
      const options = buttons.home('support');
      await bot.sendMessage(chatId, message, options);
      throw Error('CloudPayments –Ω–µ —Å–º–æ–≥ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
  }
}

const createIdea = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const options = buttons.home();
  
  try {
    const user = await getUser(callbackQuery);
    if (user.isExpert) {
      const message = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–¥–µ—é: –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.';
      await updateUserState(chatId, 'ideaAwaiting');
      await bot.sendMessage(chatId, message, options);
    } else {
      const message = '–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.';
      await bot.sendMessage(chatId, message, options);
    }
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const difficulty = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const difficulty = callbackQuery.data.split(':')[1];
  const videoId = callbackQuery.data.split(':')[2];
  const message = '–°–ø–∞—Å–∏–±–æ, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à—É –∏–¥–µ—é. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ö—ç—à—Ç–µ–≥:';
  const options = buttons.hashtags(videoId);
  const updateData = {
    difficulty: difficulty
  }

  try {
    await updateIdeaById(videoId, updateData);
    await updateUserState(chatId, 'hashtagAwaiting');
    await bot.sendMessage(chatId, message, options);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const hashtag = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const message = '–°—É–ø–µ—Ä. –ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.';
  const options = buttons.home('createYetIdea');
  const hNumber = callbackQuery.data.split(':')[1];
  const hashtag = findHashtagByNumber(hNumber);
  const videoId = callbackQuery.data.split(':')[2];
  const updateData = {
    hashtag: hashtag
  }

  try {
    await updateIdeaById(videoId, updateData)
    await updateUserState(chatId, '');
    await bot.sendMessage(chatId, message, options);
    const btns = buttons.channel.delete(videoId);
    await sendIdeaOutside(videoId, btns);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const getVideo = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const message = `–û—Ü–µ–Ω–∏—Ç–µ —Ä–æ–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —à–∞–±–ª–æ–Ω:
<code>–°—É—Ç—å –≤–∏–¥–µ–æ:
–ó–∞–≥–æ–ª–æ–≤–æ–∫:
–¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
–í–∏–¥–µ–æ—Ä—è–¥:
–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å:</code>

üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å

‚Ä¢ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –∫–∞–∂–¥–æ–º—É –ø—É–Ω–∫—Ç—É
‚Ä¢ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚úÖ –æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–π–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—é`;
  
  try {
    const video = await getNextUnratedVideo();
    await setVideoEvaluateTo(video.id, true);
    const videoOptions = {caption: video.caption};
    const videoMessage = await sendVideoToBot(chatId, video.videoId, videoOptions);
    const options = {...buttons.cancel.videoEvaluate(video.id, videoMessage.message_id), parse_mode: 'HTML'};
    await bot.sendMessage(chatId, message, options);
    await updateUserState(chatId, `evaluateAwaiting:${video.id}`);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const cancelVideoEvaluate = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const videoId = callbackQuery.data.split(':')[1];
  const messageWithVideoToDelete = callbackQuery.data.split(':')[2];
  try {
    await updateUserState(chatId, '');
    await setVideoEvaluateTo(videoId, false);
    await bot.deleteMessage(chatId, callbackQuery.message.message_id);
    await bot.deleteMessage(chatId, messageWithVideoToDelete);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const editEvaluateMessage = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const videoId = callbackQuery.data.split(':')[2];
  const message = '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ü–µ–Ω–∫–∏ —Ä–æ–ª–∏–∫–∞';
  
  try {
    const user = await getUserByChatId(chatId);
    const updateData = {
      isEvaluated: true,
      evaluation: '',
      evaluatedBy: user.id
    }
    await updateVideoById(videoId, updateData);
    await bot.sendMessage(chatId, message);
    await updateUserState(chatId, `evaluateAwaiting:${videoId}`);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const sendEvaluateMessage = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const videoId = callbackQuery.data.split(':')[2];
  const message = '–û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é';

  try {
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞–≥—Ä—É–∑–∫–∞...', show_alert: false });
    await updateUserState(chatId, '');
    await bot.sendMessage(chatId, message);
    const video = await getVideoById(videoId);
    await new Promise(resolve => setTimeout(resolve, 1000));
    await home(callbackQuery);

    const videoMessage = `<b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ü–µ–Ω–∫—É —Ä–æ–ª–∏–∫–∞ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞</b>
<blockquote>${video.evaluation}</blockquote>
`;
    const videoOptions = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'ü§î –ß—Ç–æ –∑–∞ —Ä–æ–ª–∏–∫?', callback_data: `getvd:${videoId}` }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'home' }],
        ]
      },
      parse_mode: 'HTML'
    };
    await bot.sendMessage(video.chatId, videoMessage, videoOptions);
    await sendAnswerOutside(videoId);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const toPush = async (callbackQuery) => {

}

const settingsUser = async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const message = '–£–ø—Å! –ê –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç...';

  try {
    await bot.sendMessage(chatId, message);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const settingsExpert = async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const options = buttons.home('about');

  try {
    const user = await getUser(callbackQuery);
    const subscribers = await getExpertSubscriberCount(user._id);
    const message = `–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å ${subscribers.unique} ${getPlural(subscribers.unique, '–ø–æ–¥–æ–ø–µ—á–Ω—ã–π', '–ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö', '–ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö')}. –¢–∞–∫ –∂–µ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.`;
    await bot.sendMessage(chatId, message, options);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const aboutExpert = async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const message = '–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ —Å–µ–±–µ. –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç, –∫–æ–≥–¥–∞ –æ—Ñ–æ—Ä–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º –ø–æ–¥–æ–ø–µ—á–Ω—ã–º.';

  try {
    await updateUserState(chatId, 'aboutAwaiting');
    await bot.sendMessage(chatId, message);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const outsideMessageDelete = async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const ideaId = callbackQuery.data.split(':')[2];
  
  try {
    await deleteIdeaById(ideaId);
    await bot.deleteMessage(chatId, callbackQuery.message.message_id);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const support = async (callbackQuery) => {
  const chatId = callbackQuery.from.id;
  const message = '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @snezone';
  const options = buttons.snezone;

  try {
    await bot.sendMessage(chatId, message, options);
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

const test = async (callbackQuery) => {
  console.log(callbackQuery);
  try {
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥—ë–Ω' });
    await bot.sendMessage(callbackQuery.from.id, '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥—ë–Ω');
  } catch (error) {
    handleError(error, callbackQuery);
  }
}

module.exports = {
  home,
  settings,
  sendVideo,

  getIdea,
  favorite,
  sendMeVideo,

  purchase,
  createSubscription,
  getSubscription,
  cancelSubscription,

  createIdea,
  difficulty,
  hashtag,

  getVideo,
  cancelVideoEvaluate,
  editEvaluateMessage,
  sendEvaluateMessage,

  toPush,
  settingsUser,
  settingsExpert,
  aboutExpert,

  outsideMessageDelete,
  support,
  test,
};