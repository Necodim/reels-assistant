const bot = require('../bot');
const buttons = require('../helpers/buttons');
const { getUserByChatId, getUsers, upsertUser, updateUserState } = require('../../db/service/userService');
const { createVideo, updateVideoById, getUnratedVides } = require('../../db/service/videoService');
const { createIdea } = require('../../db/service/ideaService');
const { difficulty, hashtag } = require('./callbackHandlers');

const videoAwaiting = async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    if (msg.video) {
      await createVideo(msg);
      await updateUserState(chatId, '');

      const message = '–°–ø–∞—Å–∏–±–æ, —è –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à —Ä–æ–ª–∏–∫ —ç–∫—Å–ø–µ—Ä—Ç—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç, —è –ø—Ä–∏—à–ª—é –≤–∞–º –æ—Ç–≤–µ—Ç.';
      const options = buttons.home();
      await bot.sendMessage(chatId, message, options);

      const experts = await getUsers({ isExpert: true });
      if (experts.length) {
        const expertMessage = '–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π —Ä–æ–ª–∏–∫ –Ω–∞ –æ—Ü–µ–Ω–∫—É!';
        const expertOptions = {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚≠êÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Ä–æ–ª–∏–∫', callback_data: 'getVideo' }],
            ]
          }
        }
        for (const expert of experts) {
          await bot.sendMessage(expert.chatId, expertMessage, expertOptions);
        }
      }
    } else {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–æ–ª–∏–∫.');
    }
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤–∏–¥–µ–æ:', error)
  }
}

const forwardExpertAwaiting = async (msg) => {
  const chatId = msg.chat.id;

  if (msg.forward_from && !msg.forward_from.is_bot) {
    try {
      let message;
      const user = await getUserByChatId(msg.forward_from.id);
      if (user && user.isExpert) {
        if (!!user.groupTopicId) {
          await closeForumTopic(user.groupTopicId);
        }

        const fwdUser = await upsertUser(msg, { isExpert: false });
        const name = !!fwdUser.username ? `@${fwdUser.username}` : !!fwdUser.firstName ? fwdUser.firstName : `—Å ID ${fwdUser.chatId}`;
        message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name} —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω!`
        await bot.sendMessage(fwdUser.chatId, '–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ —Å —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•≤', buttons.mainMenu('user'));
      } else {
        const topicName = user.username ? user.username : user.firstName + ` ${user.lastName}`;
        const topicId = user.groupTopicId;
        const topic = !!topicId ? await editForumTopic(topicId, topicName) : await createForumTopic(topicName);

        const fwdUser = await upsertUser(msg, { isExpert: true, topicId: topic.message_thread_id });
        const name = !!fwdUser.username ? `@${fwdUser.username}` : !!fwdUser.firstName ? fwdUser.firstName : `—Å ID ${fwdUser.chatId}`;
        message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name} —Å—Ç–∞–ª —ç–∫—Å–ø–µ—Ä—Ç–æ–º!`
        await bot.sendMessage(fwdUser.chatId, '–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ ü•≥', buttons.mainMenu('expert'));
      }
      const options = buttons.home();
      await updateUserState(chatId, '');
      await bot.sendMessage(chatId, message, options);
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–º –∏–ª–∏ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –µ–≥–æ:', error)
    }
  } else {
    await bot.sendMessage(chatId, '–ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –∏–ª–∏ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å.');
  }
}

const ideaAwaiting = async (msg) => {
  const chatId = msg.chat.id;
  const message = '–û—Ç–ª–∏—á–Ω–æ. –£–∫–∞–∂–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω–æ —Å–Ω—è—Ç—å —Ç–∞–∫–æ–π —Ä–æ–ª–∏–∫, –≥–¥–µ 1 ‚Äì –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ, –∞ 3 ‚Äì –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ:';

  try {
    if (!msg.video && !msg.caption) {
      await bot.sendMessage(chatId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ä–æ–ª–∏–∫ (–Ω–µ —Ñ–∞–π–ª–æ–º) —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.');
    } else if (!msg.video) {
      await bot.sendMessage(chatId, '–í—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ä–æ–ª–∏–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ä–æ–ª–∏–∫ (–Ω–µ —Ñ–∞–π–ª–æ–º) —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.');
    } else if (msg.video && !msg.caption) {
      await bot.sendMessage(chatId, '–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ä–æ–ª–∏–∫ (–Ω–µ —Ñ–∞–π–ª–æ–º) —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.');
    } else if (msg.video && msg.caption) {
      const idea = await createIdea(msg);

      const options = buttons.difficulty(idea.id);

      await updateUserState(chatId, 'difficultyAwaiting');
      await bot.sendMessage(chatId, message, options);
    } else {
      await bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ä–æ–ª–∏–∫ (–Ω–µ —Ñ–∞–π–ª–æ–º) —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.');
    }
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤–∏–¥–µ–æ:', error)
  }
}

const difficultyAwaiting = async (msg) => {
  await difficulty(msg);
}

const hashtagAwaiting = async (msg) => {
  await hashtag(msg);
}

const evaluateAwaiting = async (msg, state) => {
  const videoId = state.split(':')[1];
  const chatId = msg.chat.id;
  const text = msg.text;
  const message = `<b>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞</b>
<blockquote>${text}</blockquote>

–û—Ç–ø—Ä–∞–≤–ª—è—é —ç—Ç—É –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?`
  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìù –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å', callback_data: `evalt:edit:${videoId}` }],
        [{ text: '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data: `evalt:send:${videoId}` }],
      ]
    }
  }

  try {
    const user = getUserByChatId(chatId);
    const updateData = {
      isEvaluated: true,
      evaluation: text,
      evaluatedBy: user.id
    }
    await updateVideoById(videoId, updateData);
    await updateUserState(chatId, '');
    await bot.sendMessage(chatId, message, options);
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É —ç–∫—Å–ø–µ—Ä—Ç–æ–º —Ä–æ–ª–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
  }
}

const aboutAwaiting = async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const message1 = `–û—Ç–ª–∏—á–Ω–æ, –≤–æ—Ç –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ¬´–û–±–æ –º–Ω–µ¬ª:
<blockquote>${text}</blockquote>
–ò–∑–º–µ–Ω–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –≤ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.`
const options = {...buttons.mainMenu('expert'), parse_mode: 'HTML'};

try {
  const user = await upsertUser(msg, { about: text });
  await updateUserState(chatId, '');
  await bot.sendMessage(chatId, message1);
  await bot.sendChatAction(chatId, 'typing');
  const videos = getUnratedVides(user.id);
  let message2 = '–ê —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∏—Ç—å –∏–¥–µ–∏. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫, —è —Å–æ–æ–±—â—É –æ–± —ç—Ç–æ–º!'
  if (videos.length) {
    message2 += ` –ö—Å—Ç–∞—Ç–∏, —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ —Ä–æ–ª–∏–∫–∏ (${videos.length} —à—Ç.) üëè`;
  } else {
    message2 += ' –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫ –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º —Ä–æ–ª–∏–∫ –Ω–∞ –æ—Ü–µ–Ω–∫—É, —è —Ç–∞–∫–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª—é –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ü´°';
  }
  await new Promise(resolve => setTimeout(resolve, 1000));
  await bot.sendMessage(chatId, message2, options);
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–µ—Ä—Ç–µ:', error)
  }
}

module.exports = {
  videoAwaiting,
  forwardExpertAwaiting,
  ideaAwaiting,
  difficultyAwaiting,
  hashtagAwaiting,
  evaluateAwaiting,
  aboutAwaiting,
}